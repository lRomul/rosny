{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>rosny is a lightweight library for building concurrent systems.</p>"},{"location":"#installation","title":"Installation","text":"<p>Tested on:</p> <ul> <li>Linux</li> <li>Python &gt;= 3.8</li> </ul> <p>From pip:</p> <pre><code>pip install rosny\n</code></pre> <p>From source:</p> <pre><code>pip install git+https://github.com/lRomul/rosny.git@master\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>from multiprocessing import Queue\nfrom rosny import ThreadNode, ProcessNode, ComposeNode\n\n\nclass SenderNode(ThreadNode):  # using threading.Thread\n    def __init__(self, queue: Queue):\n        super().__init__(loop_rate=30)\n        self.queue = queue\n        self.count = 0\n\n    # run the method in a loop in a separate thread\n    def work(self):\n        self.queue.put(self.count)\n        self.logger.info(f'put {self.count}')\n        self.count += 1\n\n\nclass ReceiverNode(ProcessNode):  # using multiprocessing.Process\n    def __init__(self, queue: Queue):\n        super().__init__()\n        self.queue = queue\n\n    # run the method in a loop in a separate process\n    def work(self):\n        value = self.queue.get(timeout=1)\n        self.logger.info(f'get {value}')\n\n\nclass MainNode(ComposeNode):  # merging several nodes\n    def __init__(self):\n        super().__init__()\n        queue = Queue()\n        self.sender = SenderNode(queue)\n        self.receiver = ReceiverNode(queue)\n\n\nif __name__ == \"__main__\":\n    node = MainNode()\n    node.start()\n    node.wait(5)\n    node.stop()\n    node.join()\n</code></pre>"}]}